# Generated by Django 5.1.2 on 2025-04-25 22:00

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.TextField(blank=True)),
            ],
            options={
                "ordering": ["name"],
                "indexes": [
                    models.Index(fields=["name"], name="history_cou_name_32dc26_idx")
                ],
            },
        ),
        migrations.CreateModel(
            name="Period",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                (
                    "courses",
                    models.ManyToManyField(
                        blank=True, related_name="%(class)s_set", to="history.course"
                    ),
                ),
            ],
            options={
                "ordering": ["start_date", "name"],
            },
        ),
        migrations.CreateModel(
            name="Theme",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "courses",
                    models.ManyToManyField(
                        blank=True, related_name="%(class)s_set", to="history.course"
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Place",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "courses",
                    models.ManyToManyField(
                        blank=True, related_name="%(class)s_set", to="history.course"
                    ),
                ),
                (
                    "periods",
                    models.ManyToManyField(
                        blank=True, related_name="places", to="history.period"
                    ),
                ),
                (
                    "themes",
                    models.ManyToManyField(
                        blank=True, related_name="places", to="history.theme"
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("birth_date", models.DateField(blank=True, null=True)),
                ("death_date", models.DateField(blank=True, null=True)),
                (
                    "courses",
                    models.ManyToManyField(
                        blank=True, related_name="%(class)s_set", to="history.course"
                    ),
                ),
                (
                    "periods",
                    models.ManyToManyField(
                        blank=True, related_name="people", to="history.period"
                    ),
                ),
                (
                    "places",
                    models.ManyToManyField(
                        blank=True, related_name="people", to="history.place"
                    ),
                ),
                (
                    "themes",
                    models.ManyToManyField(
                        blank=True, related_name="people", to="history.theme"
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.AddField(
            model_name="period",
            name="themes",
            field=models.ManyToManyField(
                blank=True, related_name="periods", to="history.theme"
            ),
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("start_date", models.DateTimeField(blank=True, null=True)),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                (
                    "courses",
                    models.ManyToManyField(
                        blank=True, related_name="%(class)s_set", to="history.course"
                    ),
                ),
                (
                    "related_events",
                    models.ManyToManyField(blank=True, to="history.event"),
                ),
                (
                    "periods",
                    models.ManyToManyField(
                        blank=True, related_name="events", to="history.period"
                    ),
                ),
                (
                    "people",
                    models.ManyToManyField(
                        blank=True, related_name="events", to="history.person"
                    ),
                ),
                (
                    "places",
                    models.ManyToManyField(
                        blank=True, related_name="events", to="history.place"
                    ),
                ),
                (
                    "themes",
                    models.ManyToManyField(
                        blank=True, related_name="events", to="history.theme"
                    ),
                ),
            ],
            options={
                "ordering": ["start_date", "name"],
            },
        ),
        migrations.CreateModel(
            name="Document",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("publication_date", models.DateField(blank=True, null=True)),
                ("author", models.CharField(blank=True, max_length=255)),
                (
                    "courses",
                    models.ManyToManyField(
                        blank=True, related_name="%(class)s_set", to="history.course"
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="history.document",
                    ),
                ),
                (
                    "events",
                    models.ManyToManyField(
                        blank=True, related_name="documents", to="history.event"
                    ),
                ),
                (
                    "periods",
                    models.ManyToManyField(
                        blank=True, related_name="documents", to="history.period"
                    ),
                ),
                (
                    "people",
                    models.ManyToManyField(
                        blank=True, related_name="documents", to="history.person"
                    ),
                ),
                (
                    "places",
                    models.ManyToManyField(
                        blank=True, related_name="documents", to="history.place"
                    ),
                ),
                (
                    "themes",
                    models.ManyToManyField(
                        blank=True, related_name="documents", to="history.theme"
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.AddIndex(
            model_name="theme",
            index=models.Index(fields=["name"], name="history_the_name_b87611_idx"),
        ),
        migrations.AddConstraint(
            model_name="theme",
            constraint=models.UniqueConstraint(
                fields=("name",), name="unique_theme_name"
            ),
        ),
        migrations.AddIndex(
            model_name="place",
            index=models.Index(fields=["name"], name="history_pla_name_aad41c_idx"),
        ),
        migrations.AddConstraint(
            model_name="place",
            constraint=models.UniqueConstraint(
                fields=("name",), name="unique_place_name"
            ),
        ),
        migrations.AddIndex(
            model_name="person",
            index=models.Index(fields=["name"], name="history_per_name_7230df_idx"),
        ),
        migrations.AddIndex(
            model_name="person",
            index=models.Index(
                fields=["birth_date", "death_date"],
                name="history_per_birth_d_ddd7f9_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="person",
            constraint=models.UniqueConstraint(
                fields=("name",), name="unique_person_name"
            ),
        ),
        migrations.AddConstraint(
            model_name="person",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("birth_date__lte", models.F("death_date")),
                    ("death_date__isnull", True),
                    _connector="OR",
                ),
                name="person_dates_valid",
            ),
        ),
        migrations.AddIndex(
            model_name="period",
            index=models.Index(fields=["name"], name="history_per_name_3d0a9b_idx"),
        ),
        migrations.AddIndex(
            model_name="period",
            index=models.Index(
                fields=["start_date", "end_date"], name="history_per_start_d_994ecb_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="period",
            constraint=models.UniqueConstraint(
                fields=("name",), name="unique_period_name"
            ),
        ),
        migrations.AddConstraint(
            model_name="period",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("start_date__lte", models.F("end_date")),
                    ("end_date__isnull", True),
                    _connector="OR",
                ),
                name="period_dates_valid",
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(fields=["name"], name="history_eve_name_d3ec89_idx"),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["start_date", "end_date"], name="history_eve_start_d_70a858_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="event",
            constraint=models.UniqueConstraint(
                fields=("name",), name="unique_event_name"
            ),
        ),
        migrations.AddConstraint(
            model_name="event",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("start_date__lte", models.F("end_date")),
                    ("end_date__isnull", True),
                    _connector="OR",
                ),
                name="event_dates_valid",
            ),
        ),
        migrations.AddIndex(
            model_name="document",
            index=models.Index(fields=["name"], name="history_doc_name_544e5d_idx"),
        ),
        migrations.AddIndex(
            model_name="document",
            index=models.Index(
                fields=["publication_date"], name="history_doc_publica_2c8ff5_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="document",
            constraint=models.UniqueConstraint(
                fields=("name",), name="unique_document_name"
            ),
        ),
    ]
